namespace "http://openflexo.org/modellers/OWL/FML/OntologyEditor.diagramspecification" as DIAGRAM_SPECIFICATION;

use org.openflexo.technologyadapter.owl.OWLModelSlot as OWL;
use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot as DIAGRAM;

import org.openflexo.technologyadapter.diagram.model.Diagram;
import org.openflexo.technologyadapter.diagram.model.DiagramShape;
import org.openflexo.technologyadapter.owl.model.OWLOntology;
import org.openflexo.technologyadapter.owl.model.OWLClass;
import java.lang.String;
import org.openflexo.technologyadapter.diagram.model.DiagramConnector;
import org.openflexo.technologyadapter.owl.model.SubClassStatement;
import org.openflexo.technologyadapter.owl.model.OWLIndividual;
import org.openflexo.technologyadapter.owl.model.TypeStatement;
import org.openflexo.foundation.ontology.IFlexoOntologyObjectProperty;
import org.openflexo.technologyadapter.owl.model.OWLObjectProperty;

import [DIAGRAM_SPECIFICATION] as OWLONTOLOGY_EDITOR_SPEC;
import [DIAGRAM_SPECIFICATION + "/ExampleDiagram.diagram"] as EXAMPLE_DIAGRAM;
import [EXAMPLE_DIAGRAM:"SYL-2"] as DIAGRAM_SHAPE;
import [EXAMPLE_DIAGRAM:"SYL-4"] as DIAGRAM_CONNECTOR;
import [EXAMPLE_DIAGRAM:"SYL-5"] as DIAGRAM_SHAPE2;
import [EXAMPLE_DIAGRAM:"SYL-7"] as DIAGRAM_CONNECTOR2;
import [EXAMPLE_DIAGRAM:"SYL-8"] as DIAGRAM_CONNECTOR3;

/**
 * Implements a basic OWLOntology editor, allowing to edit OWL classes and individuals, with their SubClass and Type relationships
 */
@URI("http://openflexo.org/modellers/OWL/FML/OWLOntologyEditor.fml")
model OWLOntologyEditor {

	// The ontology beeing edited
	OWLOntology ontology with OWLModelSlot();

	// The diagram actually used to edit the ontology
	Diagram diagram with TypedDiagram(
			diagramSpecification=OWLONTOLOGY_EDITOR_SPEC,
			paletteElementBindings={
					PaletteElementBinding:(call=new OWLClassGR::dropOWLClassGRAtTopLevel(null), paletteElementId="http://openflexo.org/modellers/OWL/FML/OntologyEditor.diagramspecification/Palette.palette#OWLClassGR"), 
					PaletteElementBinding:(call=new OWLIndividualGR::dropOWLIndividualGRAtTopLevel(null), paletteElementId="http://openflexo.org/modellers/OWL/FML/OntologyEditor.diagramspecification/Palette.palette#OWLIndividualGR")});

	/**
	 * Build a new OWLOntologyEditor, given an ontology resource (the resource where is stored the ontology to be edited)
	 */
	create::init(Resource<OWLOntology> aOWLOntologyResource) {
		ontology = parameters.aOWLOntologyResource.resourceData;
		diagram = DIAGRAM::CreateDiagram(resourceName="diagram",resourceCenter=this.resourceCenter,relativePath="Diagrams");
	}

	/**
	 * This behaviour is called to update the whole diagram with ontology data
	 */
	public void update() {	
		this.updateClasses();
		this.updateIndividuals();
		this.updateSubClassRepresentations();
		this.updateTypeRepresentations();
		this.updateObjectPropertyRepresentations();
	}
	
	private void updateClasses() {	
		MatchingSet matchingSet = begin match OWLClassGR from this;
		for (OWLClass owlClass : select OWLClass with SelectOWLClass(declared=true) from ontology) {
			match OWLClassGR in matchingSet from this where (owlClass=owlClass) create::representOWLClass(owlClass);
		}
		end match OWLClassGR in matchingSet delete::doNotRepresentAnyMore();
	}

	private void updateIndividuals() {	
		MatchingSet matchingSet = begin match OWLIndividualGR from this;
		log "On commence";
		for (OWLIndividual owlIndividual : select OWLIndividual from ontology) {
			log "On traite " + owlIndividual;
			match OWLIndividualGR in matchingSet from this where (owlIndividual=owlIndividual) create::representOWLIndividual(owlIndividual);
		}
		end match OWLIndividualGR in matchingSet delete::doNotRepresentAnyMore();
	}

	private void updateSubClassRepresentations() { 
		MatchingSet matchingSet = begin match SubClassGR from this;
		for (OWLClassGR c1 : select OWLClassGR from this) {
			for (OWLClassGR c2 : select OWLClassGR from this) {
				if (c1 != c2) {
					if (c1.owlClass.isDirectSuperClassOf(c2.owlClass)) {
						SubClassStatement statement = c2.owlClass.getSubClassStatement(c1.owlClass);
						match SubClassGR in matchingSet from this where (subclassStatement=statement) create::representLink(c2,c1);
					}
				}
			}		
		}
		end match SubClassGR in matchingSet delete::doNotRepresentAnyMore();
	}

	private void updateTypeRepresentations() { 
		MatchingSet matchingSet = begin match IsAGR from this;
		for (OWLClassGR c1 : select OWLClassGR from this) {
			for (OWLIndividualGR c2 : select OWLIndividualGR from this) {
					if (c1.owlClass.isDirectTypeOf(c2.owlIndividual)) {
						TypeStatement statement = c2.owlIndividual.getTypeStatement(c1.owlClass);
						match IsAGR in matchingSet from this where (typeStatement=statement) create::representLink(c2,c1);
					}
			}		
		}
		end match IsAGR in matchingSet delete::doNotRepresentAnyMore();
	}

	private OWLClassGR getOWLClassGR(OWLClass aClass) {
		return select unique OWLClassGR from this where (selected.owlClass == parameters.aClass);
	}

	private void updateObjectPropertyRepresentations() { 
		MatchingSet matchingSet = begin match ObjectPropertyGR from this;		
		for (OWLObjectProperty objectProperty : select OWLObjectProperty from ontology) {
			OWLClassGR domainClassGR = this.getOWLClassGR((OWLClass)objectProperty.domain);
			OWLClassGR rangeClassGR = this.getOWLClassGR((OWLClass)objectProperty.range);
			if (rangeClassGR != null && rangeClassGR != null) {
				match ObjectPropertyGR in matchingSet from this where (objectProperty=objectProperty) create::representLink(domainClassGR,rangeClassGR,objectProperty);				
			}
		}
		end match ObjectPropertyGR in matchingSet delete::doNotRepresentAnyMore();
	}


	/**
	 * Concept representing an OWLClass
	 */
	concept OWLClassGR {
		
		DiagramShape shape with ShapeRole(metamodelElement=DIAGRAM_SHAPE,exampleLabel="OWLClass",label=owlClass.name);
		OWLClass owlClass with OWLClassRole(container=ontology);
		
		OWLClassGR dropOWLClassGRAtTopLevel(required String name) with DropScheme(targetType=OWLOntologyEditor) {
			shape = DIAGRAM::AddShape(container=topLevel) in diagram;
			owlClass = OWL::AddOWLClass(className=parameters.name) in ontology;
		}

		create::representOWLClass(OWLClass anOWLClass) {
			shape = DIAGRAM::AddShape(container=diagram) in diagram;
			owlClass = parameters.anOWLClass;
		}

		delete::doNotRepresentAnyMore() {
			// Delete the shape in the diagram
		}
	}
 
	/**
	 * Concept reifying the subclass relationship
	 */
	concept SubClassGR {
		
		DiagramConnector connector with ConnectorRole(metamodelElement=DIAGRAM_CONNECTOR,exampleLabel="subclass");
		SubClassStatement subclassStatement with SubClassStatementRole(container=ontology);
		
		SubClassGR linkOWLClassGRToOWLClassGR() with LinkScheme(fromType=OWLClassGR,toType=OWLClassGR) {
			connector = DIAGRAM::AddConnector(fromShape=fromTarget.shape,toShape=toTarget.shape) in diagram;
			subclassStatement = OWL::AddSubClassStatement(subject=fromTarget.owlClass,father=toTarget.owlClass) in ontology;
		}

		create::representLink(OWLClassGR child, OWLClassGR parent) {
			connector = DIAGRAM::AddConnector(fromShape=parameters.child.shape,toShape=parameters.parent.shape) in diagram; 
			subclassStatement = parameters.child.owlClass.getSubClassStatement(parameters.parent.owlClass);
		}

		delete::doNotRepresentAnyMore() {
			// Delete the connector in the diagram
		}
	}

	concept OWLIndividualGR {
		
		DiagramShape shape with ShapeRole(metamodelElement=DIAGRAM_SHAPE2,exampleLabel="OWLIndividual",label=owlIndividual.name);
		OWLIndividual owlIndividual with OWLIndividualRole(container=ontology);
		
		OWLIndividualGR dropOWLIndividualGRAtTopLevel(required String name) with DropScheme(targetType=OWLOntologyEditor) {
			shape = DIAGRAM::AddShape(container=topLevel) in diagram;
			owlIndividual = OWL::AddOWLIndividual(individualName=parameters.name) in ontology;
		}

		create::representOWLIndividual(OWLIndividual anOWLIndividual) {
			shape = DIAGRAM::AddShape(container=diagram) in diagram;
			owlIndividual = parameters.anOWLIndividual;
		}


	}

	concept IsAGR {
		DiagramConnector connector with ConnectorRole(metamodelElement=DIAGRAM_CONNECTOR2,exampleLabel="is a",label="is a");
		TypeStatement typeStatement with TypeStatementRole(container=ontology);

		IsAGR linkOWLIndividualGRToOWLClassGR() with LinkScheme(fromType=OWLIndividualGR,toType=OWLClassGR) {
			connector = DIAGRAM::AddConnector(fromShape=fromTarget.shape,toShape=toTarget.shape) in diagram;
			typeStatement = OWL::AddTypeStatement(subject=fromTarget.owlIndividual,type=toTarget.owlClass) in ontology;
		}

		create::representLink(OWLIndividualGR child, OWLClassGR parent) {
			connector = DIAGRAM::AddConnector(fromShape=parameters.child.shape,toShape=parameters.parent.shape) in diagram; 
			typeStatement = parameters.child.owlIndividual.getTypeStatement(parameters.parent.owlClass);
		}

		delete::doNotRepresentAnyMore() {
			// Delete the connector in the diagram
		}
}

	concept ObjectPropertyGR {
		DiagramConnector connector with ConnectorRole(metamodelElement=DIAGRAM_CONNECTOR3,exampleLabel="property",label=objectProperty.name);
		OWLObjectProperty objectProperty with OWLObjectPropertyRole(container=ontology);
		
		ObjectPropertyGR linkOWLClassGRToOWLClassGR() with LinkScheme(fromType=OWLClassGR,toType=OWLClassGR) {
			connector = DIAGRAM::AddConnector(fromShape=fromTarget.shape,toShape=toTarget.shape) in diagram;
		}
		
		create::representLink(OWLClassGR domain, OWLClassGR range, OWLObjectProperty objectProperty) {
			connector = DIAGRAM::AddConnector(fromShape=parameters.domain.shape,toShape=parameters.range.shape) in diagram; 
			objectProperty = parameters.objectProperty;
			log "On represente: " + objectProperty + " name=" + objectProperty.name;
		}

		delete::doNotRepresentAnyMore() {
			// Delete the connector in the diagram
		}
	}

}
