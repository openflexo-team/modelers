use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml")
public class BPMNModel {

  @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)  
  public GINAFIBComponent ui;
  @GetSetProperty(value="rootProcesses", access=get)  
  public List<FlexoConceptInstanceType<Process>> getRootProcesses {  
    return this.SelectFlexoConceptInstance(type=Process,where=where=(selected.parentProcess = null));  
  }

  @CreationScheme  
  BPMNModel:create() {  
    ui = ui.ConfigureGINAFIBComponent();  
  }  


  @FlexoConcept  
  public class Process {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Process> parentProcess;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String _name;  
    @FlexoConceptInstanceRole(cardinality=ZeroMany,readOnly=false)    
    public List<FlexoConceptInstanceType<Process>> childProcesses;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String author;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String version;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public Date lastUpdate;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String description;  
    @GetSetProperty(value="name", access=get)    
    public String getName {    
      return _name;    
    }    
    @GetSetProperty(value="name", access=set)    
    public void setName(String value) {    
      VirtualModelInstanceType<ProcessDiagram> processDiagram = container.container.getProcessDiagram(this);      
      log ("On change le nom pour " + value)      
      log ("ProcessDiagram=" + processDiagram)      
      processDiagram.resource.name = (value + ".fml.rt");      
      processDiagram.diagram.resource.name = (value + ".diagram");      
      _name = value;    
    }  
  
    @CreationScheme    
    Process:create(String name, FlexoConceptInstanceType<Process> parentProcess) {    
      _name = parameters.name;      
      parentProcess = parameters.parentProcess;      
      parentProcess.childProcesses.FML::AddToList(this)      
      container.firePropertyChange rootProcesses    
    }    
  
    @DeletionScheme    
    Void delete() {    
      VirtualModelInstanceType<ProcessDiagram> processDiagram = container.container.getProcessDiagram(this);      
      processDiagram.delete();      
      if (parentProcess != null) {      
        <not_implemented:[then] RemoveFromListAction()>        
        parentProcess.firePropertyChange childProcesses      
      } else {      
        container.firePropertyChange rootProcesses      
      }    
    }    
  
    @NavigationScheme    
    public Void navigateToProcessEditor() {    
      
    }    
  
  
    @FlexoConcept    
    public class AbstractActivity {    
      
      @PrimitiveRole(cardinality=ZeroOne,readOnly=false)      
      public String activityName;    
      
      @CreationScheme      
      AbstractActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Activity extends AbstractActivity,TransitionEmitter,TransitionReceiver  {    
      
      @CreationScheme      
      Activity:create(String name) {      
        activityName = parameters.name;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class BeginActivity extends AbstractActivity,TransitionEmitter  {    
      
      @CreationScheme      
      BeginActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class EndActivity extends AbstractActivity,TransitionReceiver  {    
      
      @CreationScheme      
      EndActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Gateway extends AbstractActivity,TransitionEmitter,TransitionReceiver  {    
      
      @CreationScheme      
      Gateway:create(String condition) {      
        activityName = parameters.condition;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Transition {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<TransitionEmitter> from;    
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<TransitionReceiver> to;    
      
      @CreationScheme      
      Transition:create(FlexoConceptInstanceType<TransitionEmitter> from, FlexoConceptInstanceType<TransitionReceiver> to) {      
        from = parameters.from;        
        to = parameters.to;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    /**    
     * An abstract actitity which declares one or more transitions    
     *     
     */    
    @FlexoConcept    
    public class TransitionEmitter extends AbstractActivity  {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroMany,readOnly=false)      
      public List<FlexoConceptInstanceType<Transition>> outTransitions;    
    }    
  
    /**    
     * An abstract actitity which declares one or more transitions    
     *     
     */    
    @FlexoConcept    
    public class TransitionReceiver extends AbstractActivity  {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroMany,readOnly=false)      
      public List<FlexoConceptInstanceType<Transition>> inTransitions;    
    }    
  
  }  

  @FlexoConcept  
  public class AbstractActivity {  
  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String activityName;  
  
    @CreationScheme    
    AbstractActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Activity extends AbstractActivity,TransitionEmitter,TransitionReceiver  {  
  
    @CreationScheme    
    Activity:create(String name) {    
      activityName = parameters.name;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BeginActivity extends AbstractActivity,TransitionEmitter  {  
  
    @CreationScheme    
    BeginActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class EndActivity extends AbstractActivity,TransitionReceiver  {  
  
    @CreationScheme    
    EndActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Gateway extends AbstractActivity,TransitionEmitter,TransitionReceiver  {  
  
    @CreationScheme    
    Gateway:create(String condition) {    
      activityName = parameters.condition;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Transition {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<TransitionEmitter> from;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<TransitionReceiver> to;  
  
    @CreationScheme    
    Transition:create(FlexoConceptInstanceType<TransitionEmitter> from, FlexoConceptInstanceType<TransitionReceiver> to) {    
      from = parameters.from;      
      to = parameters.to;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  /**  
   * An abstract actitity which declares one or more transitions  
   *   
   */  
  @FlexoConcept  
  public class TransitionEmitter extends AbstractActivity  {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroMany,readOnly=false)    
    public List<FlexoConceptInstanceType<Transition>> outTransitions;  
  }  

  /**  
   * An abstract actitity which declares one or more transitions  
   *   
   */  
  @FlexoConcept  
  public class TransitionReceiver extends AbstractActivity  {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroMany,readOnly=false)    
    public List<FlexoConceptInstanceType<Transition>> inTransitions;  
  }  

}
