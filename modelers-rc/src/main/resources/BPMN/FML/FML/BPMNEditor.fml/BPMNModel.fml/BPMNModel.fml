use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.technologyadapter.emf.EMFModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml")
public class BPMNModel {

  public GINAFIBComponent ui;
  ModelSlot bpmnModel type=EMFModelSlot$EMFModelSlotImpl_$$_jvst684_a3 conformTo="http://www.omg.org/spec/BPMN/20100524/MODEL-XMI" required=true readOnly=false;

  @CreationScheme  
  BPMNModel:create(EMFModelResource bpmnResource) {  
    ui = ui.ConfigureGINAFIBComponent();    
    bpmnModel = parameters.bpmnResource.resourceData;    
    IndividualOfClass(Definitions) definitions = SelectUniqueEMFObjectIndividual from bpmnModel as Definitions;    
    log ("root elements = " + definitions.rootElements)    
    for (rootElement : definitions.rootElements) {    
      log ("coucou le " + rootElement)      
      log ("type=" + rootElement.type.name)      
      if (rootElement.type.name = "Process") {      
        Process.create(rootElement)      
      }    
    }  
  }  


  @FlexoConcept  
  public class Process {  
  
    FlexoRole eProcess as Individual conformTo Process from bpmnModel ;  
      
    public String name = ((eProcess.name != null) ? eProcess.name : "Root process");  
  
    @CreationScheme    
    Process:create(EMFObjectIndividual aProcess) {    
      eProcess = parameters.aProcess;      
      for (flowElement : eProcess.flowElements) {      
        log ("flowElement : " + flowElement)        
        if (flowElement.type.name = "StartEvent") {        
          model.AddFlexoConceptInstance()        
        }        
        if (flowElement.type.name = "StartEvent") {        
          model.AddFlexoConceptInstance()        
        }        
        if (flowElement.type.name = "StartEvent") {        
          model.AddFlexoConceptInstance()        
        }      
      }    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @NavigationScheme    
    public Void navigateToProcessEditor() {    
      
    }    
  
    @ActionScheme    
    public Void debug() {    
      log ("process=" + eProcess)      
      log ("name=" + name)      
      for (flowElement : eProcess.flowElements) {      
        log ("element : " + flowElement)      
      }    
    }    
  
  
    @FlexoConcept    
    public class FlowNode extends FlowElement  {    
      
      public List incoming;    
      public List outgoing;    
      
      @CreationScheme      
      FlowNode:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Task extends FlowNode  {    
      
      FlexoRole eTask as Individual conformTo Task from bpmnModel ;    
      
      @CreationScheme      
      Task:create(EMFObjectIndividual task) {      
        eTask = parameters.task;      
      }      
      
    }    
  
    @FlexoConcept    
    public class StartEvent extends CatchEvent  {    
      
      FlexoRole eStartEvent as Individual conformTo StartEvent from bpmnModel ;    
      
      @CreationScheme      
      StartEvent:create(EMFObjectIndividual startEvent) {      
        eStartEvent = parameters.startEvent;      
      }      
      
    }    
  
    @FlexoConcept    
    public class EndEvent extends ThrowEvent  {    
      
      FlexoRole eEndEvent as Individual conformTo EndEvent from bpmnModel ;    
      
      @CreationScheme      
      EndEvent:create(EMFObjectIndividual endEvent) {      
        eEndEvent = parameters.endEvent;      
      }      
      
    }    
  
    @FlexoConcept    
    public class Gateway extends FlowNode  {    
    }    
  
    @FlexoConcept    
    public class SequenceFlow extends FlowElement  {    
      
      FlexoRole eSequenceFlow as Individual conformTo SequenceFlow from bpmnModel ;    
      public FlowNode source;    
      public FlowNode target;    
    }    
  
  }  

  @FlexoConcept  
  public class FlowNode extends FlowElement  {  
  
    public List incoming;  
    public List outgoing;  
  
    @CreationScheme    
    FlowNode:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Task extends FlowNode  {  
  
    FlexoRole eTask as Individual conformTo Task from bpmnModel ;  
  
    @CreationScheme    
    Task:create(EMFObjectIndividual task) {    
      eTask = parameters.task;    
    }    
  
  }  

  @FlexoConcept  
  public class StartEvent extends CatchEvent  {  
  
    FlexoRole eStartEvent as Individual conformTo StartEvent from bpmnModel ;  
  
    @CreationScheme    
    StartEvent:create(EMFObjectIndividual startEvent) {    
      eStartEvent = parameters.startEvent;    
    }    
  
  }  

  @FlexoConcept  
  public class EndEvent extends ThrowEvent  {  
  
    FlexoRole eEndEvent as Individual conformTo EndEvent from bpmnModel ;  
  
    @CreationScheme    
    EndEvent:create(EMFObjectIndividual endEvent) {    
      eEndEvent = parameters.endEvent;    
    }    
  
  }  

  @FlexoConcept  
  public class Gateway extends FlowNode  {  
  }  

  @FlexoConcept  
  public class Event extends FlowNode  {  
  
    @CreationScheme    
    Event:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ThrowEvent extends Event  {  
  
    @CreationScheme    
    ThrowEvent:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class CatchEvent extends Event  {  
  
    @CreationScheme    
    CatchEvent:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class SequenceFlow extends FlowElement  {  
  
    FlexoRole eSequenceFlow as Individual conformTo SequenceFlow from bpmnModel ;  
    public FlowNode source;  
    public FlowNode target;  
  }  

  @FlexoConcept  
  public class FlowElement {  
  
    @CreationScheme    
    FlowElement:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
