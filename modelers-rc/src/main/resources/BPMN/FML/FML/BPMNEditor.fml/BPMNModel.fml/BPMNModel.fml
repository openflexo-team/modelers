use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.technologyadapter.emf.EMFModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml")
public class BPMNModel {

  public GINAFIBComponent ui;
  ModelSlot bpmnModel type=EMFModelSlot$EMFModelSlotImpl_$$_jvst684_9f conformTo="http://www.omg.org/spec/BPMN/20100524/MODEL-XMI" required=true readOnly=false;

  @CreationScheme  
  BPMNModel:create(EMFModelResource bpmnResource) {  
    ui = ui.ConfigureGINAFIBComponent();    
    bpmnModel = parameters.bpmnResource.resourceData;    
    IndividualOfClass(Definitions) definitions = SelectUniqueEMFObjectIndividual from bpmnModel as Definitions;    
    log ("root elements = " + definitions.rootElements)    
    for (rootElement : definitions.rootElements) {    
      log ("coucou le " + rootElement)      
      log ("type=" + rootElement.type.name)      
      if (rootElement.type.name = "Process") {      
        Process.create(rootElement)      
      }    
    }  
  }  


  @FlexoConcept  
  public class Process {  
  
    FlexoRole eProcess as Individual conformTo Process from bpmnModel ;  
      
    public String name = ((eProcess.name != null) ? eProcess.name : "Root process");  
  
    @CreationScheme    
    Process:create(EMFObjectIndividual aProcess) {    
      eProcess = parameters.aProcess;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @NavigationScheme    
    public Void navigateToProcessEditor() {    
      
    }    
  
    @ActionScheme    
    public Void debug() {    
      log ("process=" + eProcess)      
      log ("name=" + name)    
    }    
  
  
    @FlexoConcept    
    public class AbstractActivity {    
      
      public String activityName;    
      
      @CreationScheme      
      AbstractActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Activity {    
      
      @CreationScheme      
      Activity:create(String name) {      
        activityName = parameters.name;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class BeginActivity {    
      
      @CreationScheme      
      BeginActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class EndActivity {    
      
      @CreationScheme      
      EndActivity:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Gateway {    
      
      @CreationScheme      
      Gateway:create(String condition) {      
        activityName = parameters.condition;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Transition {    
      
      public TransitionEmitter from;    
      public TransitionReceiver to;    
      
      @CreationScheme      
      Transition:create(TransitionEmitter from, TransitionReceiver to) {      
        from = parameters.from;        
        to = parameters.to;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    /**    
     * An abstract actitity which declares one or more transitions    
     *     
     */    
    @FlexoConcept    
    public class TransitionEmitter {    
      
      public List outTransitions;    
    }    
  
    /**    
     * An abstract actitity which declares one or more transitions    
     *     
     */    
    @FlexoConcept    
    public class TransitionReceiver {    
      
      public List inTransitions;    
    }    
  
  }  

  @FlexoConcept  
  public class AbstractActivity {  
  
    public String activityName;  
  
    @CreationScheme    
    AbstractActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Activity {  
  
    @CreationScheme    
    Activity:create(String name) {    
      activityName = parameters.name;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BeginActivity {  
  
    @CreationScheme    
    BeginActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class EndActivity {  
  
    @CreationScheme    
    EndActivity:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Gateway {  
  
    @CreationScheme    
    Gateway:create(String condition) {    
      activityName = parameters.condition;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Transition {  
  
    public TransitionEmitter from;  
    public TransitionReceiver to;  
  
    @CreationScheme    
    Transition:create(TransitionEmitter from, TransitionReceiver to) {    
      from = parameters.from;      
      to = parameters.to;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  /**  
   * An abstract actitity which declares one or more transitions  
   *   
   */  
  @FlexoConcept  
  public class TransitionEmitter {  
  
    public List outTransitions;  
  }  

  /**  
   * An abstract actitity which declares one or more transitions  
   *   
   */  
  @FlexoConcept  
  public class TransitionReceiver {  
  
    public List inTransitions;  
  }  

}
