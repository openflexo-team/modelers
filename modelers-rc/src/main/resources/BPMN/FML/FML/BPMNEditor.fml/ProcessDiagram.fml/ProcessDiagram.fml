use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/ProcessDiagram.fml")
public class ProcessDiagram {

  public Diagram diagram;
  public Process process;

  @CreationScheme  
  ProcessDiagram:createNewProcess(String name) {  
    diagram = CreateDiagram();    
    process = Process.create();  
  }  

  @CreationScheme  
  ProcessDiagram:createNewSubProcess(String name, Process parentProcess) {  
    diagram = CreateDiagram();    
    process = Process.create();  
  }  

  @ActionScheme  
  public ProcessDiagram newSubProcess(String processName) {  
    return ProcessDiagram.createNewSubProcess(parameters.processName,this.process);  
  }  

  @DeletionScheme  
  Void delete() {  
    delete diagram;  
  }  


  @FlexoConcept  
  public class ActivityGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public Activity activity;  
  
    @DropScheme    
    ActivityGR:dropActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = Activity.create("Activity");    
    }    
  
  }  

  @FlexoConcept  
  public class BeginActivityGR extends TransitionEmitterGR  {  
  
    public DiagramShape shape;  
    public BeginActivity activity;  
  
    @DropScheme    
    BeginActivityGR:dropBeginActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = BeginActivity.create();    
    }    
  
  }  

  @FlexoConcept  
  public class EndActivityGR extends TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public EndActivity activity;  
  
    @DropScheme    
    EndActivityGR:dropEndActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = EndActivity.create();    
    }    
  
  }  

  @FlexoConcept  
  public class GatewayGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public Gateway activity;  
  
    @DropScheme    
    GatewayGR:dropGatewayGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = Gateway.create("condition ?");    
    }    
  
  }  

  @FlexoConcept  
  public class TransitionGR {  
  
    public DiagramConnector connector;  
    public Transition transition;  
  
    @LinkScheme    
    TransitionGR:linkEmitterGRToReceiverGR() {    
      connector = diagram.AddConnector();      
      transition = Transition.create(fromTarget.activity,toTarget.activity);      
      fromTarget.activity.outTransitions.add(transition)      
      toTarget.activity.inTransitions.add(transition)    
    }    
  
  }  

  @FlexoConcept  
  public class AbstractActivityGR {  
  
      
    abstract DiagramShape shape;  
      
    abstract AbstractActivity activity;  
  }  

  @FlexoConcept  
  public class TransitionEmitterGR extends AbstractActivityGR  {  
  
      
    abstract TransitionEmitter activity;  
  }  

  @FlexoConcept  
  public class TransitionReceiverGR extends AbstractActivityGR  {  
  
      
    abstract TransitionReceiver activity;  
  }  

}
