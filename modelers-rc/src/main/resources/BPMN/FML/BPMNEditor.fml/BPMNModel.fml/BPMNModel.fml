use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.technologyadapter.emf.EMFModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml")
public class BPMNModel {

  public GINAFIBComponent ui;

  @CreationScheme  
  BPMNModel:create() {  
    ui = ui.ConfigureGINAFIBComponent();    
    Definitions definitions = SelectUniqueEMFObjectIndividual from bpmnModel as Definitions;    
    log ("root elements = " + definitions.rootElements)    
    for (rootElement : definitions.rootElements) {    
      log ("Found root element " + rootElement)      
      if (rootElement.type.name = "Process") {      
        Process.create(rootElement)      
      }    
    }    
    for (diagram : definitions.diagrams) {    
      log ("Found diagram " + diagram)      
      log ("type=" + diagram.type.name)      
      if (diagram.type.name = "BPMNDiagram") {      
        log ("Create diagram " + diagram)        
        log ("bpmnElement=" + diagram.plane.bpmnElement)        
        Process process = this.getProcess(diagram.plane.bpmnElement);        
        log ("Process=" + process)        
        ProcessDiagram.representsDiagram(diagram,process)      
      }    
    }  
  }  

  @ActionScheme  
  Process getProcess(BaseElement processObject) {  
    return this.SelectUniqueFlexoConceptInstance(type=Process,where=where=(selected.eObject = parameters.processObject));  
  }  


  @FlexoConcept  
  public class Process extends BaseElement  {  
  
    FlexoRole eObject as Individual conformTo Process from bpmnModel ;  
      
    public String processName = ((eObject.name != null) ? eObject.name : bpmnModel.resource.name.substring(0,bpmnModel.resource.name.indexOf(".")));  
  
    @CreationScheme    
    Process:create(EMFObjectIndividual aProcess) {    
      eObject = parameters.aProcess;      
      for (flowElement : eObject.flowElements) {      
        if (flowElement.type.name = "StartEvent") {        
          StartEvent.create(flowElement)        
        }        
        if (flowElement.type.name = "EndEvent") {        
          EndEvent.create(flowElement)        
        }        
        if (flowElement.type.name = "Task") {        
          Task.create(flowElement)        
        }        
        if (flowElement.type.name = "ParallelGateway") {        
          ParallelGateway.create(flowElement)        
        }        
        if (flowElement.type.name = "ExclusiveGateway") {        
          ExclusiveGateway.create(flowElement)        
        }      
      }      
      for (flowElement : eObject.flowElements) {      
        if (flowElement.type.name = "SequenceFlow") {        
          SequenceFlow.create(flowElement)        
        }      
      }    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @NavigationScheme    
    public Void navigateToProcessEditor() {    
      
    }    
  
    @ActionScheme    
    public Void debug() {    
      log ("process=" + eObject)      
      log ("name=" + processName)      
      for (flowElement : eObject.flowElements) {      
        log ("element : " + flowElement)      
      }    
    }    
  
    @ActionScheme    
    FlowNode getFlowNode(FlowNode flowNodeObject) {    
      return container.SelectUniqueFlexoConceptInstance(type=FlowNode,where=where=(selected.eObject = parameters.flowNodeObject));    
    }    
  
    @ActionScheme    
    SequenceFlow getSequenceFlow(SequenceFlow sequenceFlowObject) {    
      return container.SelectUniqueFlexoConceptInstance(type=SequenceFlow,where=where=(selected.eObject = parameters.sequenceFlowObject));    
    }    
  
  
    @FlexoConcept    
    public class FlowNode extends FlowElement  {    
      
      public List incoming;    
      public List outgoing;    
          
      abstract FlowNode eObject;    
          
      public String name = eObject.name;    
      
      @CreationScheme      
      FlowNode:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class Task extends FlowNode  {    
      
      FlexoRole eObject as Individual conformTo Task from bpmnModel ;    
      
      @CreationScheme      
      Task:create(EMFObjectIndividual task) {      
        eObject = parameters.task;      
      }      
      
    }    
  
    @FlexoConcept    
    public class StartEvent extends CatchEvent  {    
      
      FlexoRole eObject as Individual conformTo StartEvent from bpmnModel ;    
          
      public String name = "Begin";    
      
      @CreationScheme      
      StartEvent:create(EMFObjectIndividual startEvent) {      
        eObject = parameters.startEvent;      
      }      
      
    }    
  
    @FlexoConcept    
    public class EndEvent extends ThrowEvent  {    
      
      FlexoRole eObject as Individual conformTo EndEvent from bpmnModel ;    
          
      public String name = "End";    
      
      @CreationScheme      
      EndEvent:create(EMFObjectIndividual endEvent) {      
        eObject = parameters.endEvent;      
      }      
      
    }    
  
    @FlexoConcept    
    public class Gateway extends FlowNode  {    
    }    
  
    @FlexoConcept    
    public class SequenceFlow extends FlowElement  {    
      
      FlexoRole eObject as Individual conformTo SequenceFlow from bpmnModel ;    
      public FlowNode source;    
      public FlowNode target;    
          
      public String name = eObject.name;    
      
      @CreationScheme      
      SequenceFlow:create(EMFObjectIndividual sequenceFlow) {      
        eObject = parameters.sequenceFlow;        
        source = container.getFlowNode(eObject.sourceRef);        
        target = container.getFlowNode(eObject.targetRef);        
        log ("Create SequenceFlow for " + parameters.sequenceFlow)        
        log ("sourceRef=" + eObject.sourceRef)        
        log ("targetRef=" + eObject.targetRef)        
        log ("source=" + source)        
        log ("target=" + target)        
        source.outgoing.add(this)        
        target.incoming.add(this)      
      }      
      
    }    
  
    @FlexoConcept    
    public class FlowElement extends BaseElement  {    
      
          
      abstract FlowElement eObject;    
      
      @CreationScheme      
      FlowElement:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class FlowNode extends FlowElement  {  
  
    public List incoming;  
    public List outgoing;  
      
    abstract FlowNode eObject;  
      
    public String name = eObject.name;  
  
    @CreationScheme    
    FlowNode:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class Task extends FlowNode  {  
  
    FlexoRole eObject as Individual conformTo Task from bpmnModel ;  
  
    @CreationScheme    
    Task:create(EMFObjectIndividual task) {    
      eObject = parameters.task;    
    }    
  
  }  

  @FlexoConcept  
  public class StartEvent extends CatchEvent  {  
  
    FlexoRole eObject as Individual conformTo StartEvent from bpmnModel ;  
      
    public String name = "Begin";  
  
    @CreationScheme    
    StartEvent:create(EMFObjectIndividual startEvent) {    
      eObject = parameters.startEvent;    
    }    
  
  }  

  @FlexoConcept  
  public class EndEvent extends ThrowEvent  {  
  
    FlexoRole eObject as Individual conformTo EndEvent from bpmnModel ;  
      
    public String name = "End";  
  
    @CreationScheme    
    EndEvent:create(EMFObjectIndividual endEvent) {    
      eObject = parameters.endEvent;    
    }    
  
  }  

  @FlexoConcept  
  public class Gateway extends FlowNode  {  
  }  

  @FlexoConcept  
  public class Event extends FlowNode  {  
  
      
    abstract Event eObject;  
  
    @CreationScheme    
    Event:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ThrowEvent extends Event  {  
  
      
    abstract ThrowEvent eObject;  
  
    @CreationScheme    
    ThrowEvent:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class CatchEvent extends Event  {  
  
      
    abstract CatchEvent eObject;  
  
    @CreationScheme    
    CatchEvent:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class SequenceFlow extends FlowElement  {  
  
    FlexoRole eObject as Individual conformTo SequenceFlow from bpmnModel ;  
    public FlowNode source;  
    public FlowNode target;  
      
    public String name = eObject.name;  
  
    @CreationScheme    
    SequenceFlow:create(EMFObjectIndividual sequenceFlow) {    
      eObject = parameters.sequenceFlow;      
      source = container.getFlowNode(eObject.sourceRef);      
      target = container.getFlowNode(eObject.targetRef);      
      log ("Create SequenceFlow for " + parameters.sequenceFlow)      
      log ("sourceRef=" + eObject.sourceRef)      
      log ("targetRef=" + eObject.targetRef)      
      log ("source=" + source)      
      log ("target=" + target)      
      source.outgoing.add(this)      
      target.incoming.add(this)    
    }    
  
  }  

  @FlexoConcept  
  public class FlowElement extends BaseElement  {  
  
      
    abstract FlowElement eObject;  
  
    @CreationScheme    
    FlowElement:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BaseElement {  
  
      
    abstract BaseElement eObject;  
  
    @CreationScheme    
    BaseElement:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ParallelGateway extends Gateway  {  
  
    FlexoRole eObject as Individual conformTo ParallelGateway from bpmnModel ;  
      
    public String name = "ParallelGateway";  
  
    @CreationScheme    
    ParallelGateway:create(EMFObjectIndividual gateway) {    
      eObject = parameters.gateway;    
    }    
  
  }  

  @FlexoConcept  
  public class ExclusiveGateway extends Gateway  {  
  
    FlexoRole eObject as Individual conformTo ExclusiveGateway from bpmnModel ;  
      
    public String name = "ExclusiveGateway";  
  
    @CreationScheme    
    ExclusiveGateway:create(EMFObjectIndividual gateway) {    
      eObject = parameters.gateway;    
    }    
  
  }  

}
