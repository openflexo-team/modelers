use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/ProcessDiagram.fml")
public class ProcessDiagram {

  @TypedDiagramModelSlot(metamodel="http://openflexo.org/modellers/resources/BPMN/ProcessDiagram.diagramspecification",cardinality=ZeroOne,readOnly=false)  
  public DiagramType<ProcessDiagram> diagram;
  @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)  
  public FlexoConceptInstanceType<Process> process;

  @CreationScheme  
  ProcessDiagram:createNewProcess(String name) {  
    diagram = CreateDiagram$CreateDiagramImpl_$$_jvst367_93diagram from diagram {    
    };    
    process = Process.create(parameters.name,null);  
  }  

  @CreationScheme  
  ProcessDiagram:createNewSubProcess(String name, FlexoConceptInstanceType<Process> parentProcess) {  
    diagram = CreateDiagram$CreateDiagramImpl_$$_jvst367_93diagram from diagram {    
    };    
    process = Process.create(parameters.name,parameters.parentProcess);  
  }  

  @ActionScheme  
  public VirtualModelInstanceType<ProcessDiagram> newSubProcess(String processName) {  
    return ProcessDiagram.createNewSubProcess(parameters.processName,this.process);  
  }  


  @FlexoConcept  
  public class ActivityGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    FlexoRole shape as ShapeSpecification from ProcessDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Activity> activity;  
  
    @DropScheme    
    ActivityGR:dropActivityGRAtTopLevel() {    
      shape = diagram.DIAGRAM::AddShape {      
        label = activity.activityName;      
      };      
      activity = Activity.create("Activity");    
    }    
  
  }  

  @FlexoConcept  
  public class BeginActivityGR extends TransitionEmitterGR  {  
  
    FlexoRole shape as ShapeSpecification from ProcessDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<BeginActivity> activity;  
  
    @DropScheme    
    BeginActivityGR:dropBeginActivityGRAtTopLevel() {    
      shape = diagram.DIAGRAM::AddShape {      
        label = activity.activityName;      
      };      
      activity = BeginActivity.create();    
    }    
  
  }  

  @FlexoConcept  
  public class EndActivityGR extends TransitionReceiverGR  {  
  
    FlexoRole shape as ShapeSpecification from ProcessDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<EndActivity> activity;  
  
    @DropScheme    
    EndActivityGR:dropEndActivityGRAtTopLevel() {    
      shape = diagram.DIAGRAM::AddShape {      
        label = activity.activityName;      
      };      
      activity = EndActivity.create();    
    }    
  
  }  

  @FlexoConcept  
  public class GatewayGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    FlexoRole shape as ShapeSpecification from ProcessDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Gateway> activity;  
  
    @DropScheme    
    GatewayGR:dropGatewayGRAtTopLevel() {    
      shape = diagram.DIAGRAM::AddShape {      
        label = this.activity.activityName;      
      };      
      activity = Gateway.create("condition ?");    
    }    
  
  }  

  @FlexoConcept  
  public class TransitionGR {  
  
    FlexoRole connector as ConnectorSpecification from ProcessDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Transition> transition;  
  
    @LinkScheme    
    TransitionGR:linkEmitterGRToReceiverGR() {    
      connector = AddConnector$AddConnectorImpl_$$_jvst367_8e conformTo ConnectorSpecification from diagram {      
      };      
      transition = Transition.create(fromTarget.activity,toTarget.activity);      
      fromTarget.activity.outTransitions.FML::AddToList(transition)      
      toTarget.activity.inTransitions.FML::AddToList(transition)    
    }    
  
  }  

  @FlexoConcept  
  public class AbstractActivityGR {  
  
    @AbstractProperty    
    abstract DiagramShape shape;  
    @AbstractProperty    
    abstract FlexoConceptInstanceType<AbstractActivity> activity;  
  }  

  @FlexoConcept  
  public class TransitionEmitterGR extends AbstractActivityGR  {  
  
    @AbstractProperty    
    abstract FlexoConceptInstanceType<TransitionEmitter> activity;  
  }  

  @FlexoConcept  
  public class TransitionReceiverGR extends AbstractActivityGR  {  
  
    @AbstractProperty    
    abstract FlexoConceptInstanceType<TransitionReceiver> activity;  
  }  

}
