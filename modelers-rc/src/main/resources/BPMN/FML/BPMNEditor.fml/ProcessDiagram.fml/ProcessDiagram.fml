use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.technologyadapter.emf.EMFModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/ProcessDiagram.fml")
public class ProcessDiagram {

  public Diagram diagram;
  public Process process;
  ModelSlot bpmnModel type=EMFModelSlot$EMFModelSlotImpl_$$_jvst684_a7 conformTo="http://www.omg.org/spec/BPMN/20100524/MODEL-XMI" required=true readOnly=false;
  FlexoRole eObject as Individual conformTo  from bpmnModel ;

  @CreationScheme  
  ProcessDiagram:createNewProcess(String name) {  
    diagram = CreateDiagram();    
    process = Process.create();  
  }  

  @CreationScheme  
  ProcessDiagram:createNewSubProcess(String name, Process parentProcess) {  
    diagram = CreateDiagram();    
    process = Process.create();  
  }  

  @ActionScheme  
  public ProcessDiagram newSubProcess(String processName) {  
    return ProcessDiagram.createNewSubProcess(parameters.processName,this.process);  
  }  

  @DeletionScheme  
  Void delete() {  
    delete diagram;  
  }  


  @FlexoConcept  
  public class ActivityGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public Task activity;  
  
    @DropScheme    
    ActivityGR:dropActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = model.AddFlexoConceptInstance();    
    }    
  
  }  

  @FlexoConcept  
  public class BeginActivityGR extends TransitionEmitterGR  {  
  
    public DiagramShape shape;  
    public StartEvent activity;  
  
    @DropScheme    
    BeginActivityGR:dropBeginActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = StartEvent.create();    
    }    
  
  }  

  @FlexoConcept  
  public class EndActivityGR extends TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public EndEvent activity;  
  
    @DropScheme    
    EndActivityGR:dropEndActivityGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = model.AddFlexoConceptInstance();    
    }    
  
  }  

  @FlexoConcept  
  public class GatewayGR extends TransitionEmitterGR,TransitionReceiverGR  {  
  
    public DiagramShape shape;  
    public Gateway activity;  
  
    @DropScheme    
    GatewayGR:dropGatewayGRAtTopLevel() {    
      shape = diagram.AddShape();      
      activity = model.AddFlexoConceptInstance();    
    }    
  
  }  

  @FlexoConcept  
  public class TransitionGR {  
  
    public DiagramConnector connector;  
    public FlexoConceptInstance transition;  
  
    @LinkScheme    
    TransitionGR:linkEmitterGRToReceiverGR() {    
      connector = diagram.AddConnector();      
      transition = model.AddFlexoConceptInstance();      
      fromTarget.activity.outTransitions.add(transition)      
      toTarget.activity.inTransitions.add(transition)    
    }    
  
  }  

  @FlexoConcept  
  public class AbstractActivityGR {  
  
      
    abstract DiagramShape shape;  
      
    abstract FlowNode activity;  
  }  

  @FlexoConcept  
  public class TransitionEmitterGR extends AbstractActivityGR  {  
  
      
    abstract UndefinedFlexoConceptInstanceType<http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml#TransitionEmitter> activity;  
  }  

  @FlexoConcept  
  public class TransitionReceiverGR extends AbstractActivityGR  {  
  
      
    abstract UndefinedFlexoConceptInstanceType<http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml#TransitionReceiver> activity;  
  }  

}
