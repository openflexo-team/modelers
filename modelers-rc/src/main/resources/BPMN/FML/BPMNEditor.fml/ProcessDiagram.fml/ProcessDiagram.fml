use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.technologyadapter.emf.EMFModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/ProcessDiagram.fml")
public class ProcessDiagram {

  public Diagram diagram;
  public Process process;
  FlexoRole diagramEObject as Individual conformTo BPMNDiagram from bpmnModel ;
  FlexoRole planeEObject as Individual conformTo BPMNPlane from bpmnModel ;
  FlexoRole bpmnShape as Individual conformTo BPMNShape from bpmnModel ;
  FlexoRole bpmnEdge as Individual conformTo BPMNEdge from bpmnModel ;

  @DeletionScheme  
  Void delete() {  
    delete diagram;  
  }  

  @CreationScheme  
  ProcessDiagram:representsDiagram(EMFObjectIndividual diagram, Process process) {  
    diagram = CreateDiagram();    
    diagramEObject = parameters.diagram;    
    planeEObject = diagramEObject.plane;    
    process = parameters.process;    
    for (planeElement : planeEObject.planeElement) {    
      log ("element : " + planeElement)      
      if (planeElement.type.name = "BPMNShape") {      
        bpmnShape = planeElement;        
        log ("shape element = " + this.bpmnShape.bpmnElement)        
        if (this.bpmnShape.bpmnElement.type.name = "StartEvent") {        
              
        }      
      }    
    }  
  }  


  @FlexoConcept  
  public class TaskGR extends FlowNodeGR  {  
  
    public DiagramShape shape;  
    public Task modelElement;  
  
    @DropScheme    
    TaskGR:dropActivityGRAtTopLevel() {    
      shape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class StartEventGR extends FlowNodeGR  {  
  
    public DiagramShape shape;  
    public StartEvent modelElement;  
  
    @DropScheme    
    StartEventGR:dropBeginActivityGRAtTopLevel() {    
      shape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class EndActivityGR extends FlowNodeGR  {  
  
    public DiagramShape shape;  
    public EndEvent modelElement;  
  
    @DropScheme    
    EndActivityGR:dropEndActivityGRAtTopLevel() {    
      shape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class GatewayGR extends FlowNodeGR  {  
  }  

  @FlexoConcept  
  public class SequenceFlowGR {  
  
    public DiagramConnector connector;  
    public SequenceFlow sequenceFlow;  
    public FlowNodeGR fromNodeGR;  
    public FlowNodeGR toNodeGR;  
  
    @LinkScheme    
    SequenceFlowGR:linkNodes() {    
      connector = diagram.AddConnector();    
    }    
  
  }  

  @FlexoConcept  
  public class FlowNodeGR {  
  
      
    abstract DiagramShape shape;  
      
    abstract FlowNode modelElement;  
  }  

  @FlexoConcept  
  public class TransitionEmitterGR extends FlowNodeGR  {  
  
      
    abstract UndefinedFlexoConceptInstanceType<http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml#TransitionEmitter> activity;  
  }  

  @FlexoConcept  
  public class TransitionReceiverGR extends FlowNodeGR  {  
  
      
    abstract UndefinedFlexoConceptInstanceType<http://openflexo.org/modellers/resources/BPMN/FML/BPMNEditor.fml/BPMNModel.fml#TransitionReceiver> activity;  
  }  

}
