<project name="project" default="package" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" />

	<target name="defineProperties">
		<property environment="env"/>
		<!-- Remove '-SNAPSHOT' if any -->
		<propertyregex property="flexo_version" input="${project.version}" regexp="-SNAPSHOT" replace="" />
		<!-- Set a 3 digit version in normalized_version -->
		<propertyregex property="normalized_version" input="${flexo_version}" regexp="([0-9]+)\.([0-9]+)\.([0-9]+)" select="\0" defaultvalue="${flexo_version}.0"/>
		<!-- ./target -->
		<property name="flexobuild.work.dir" value="${project.build.directory}/modelers" />
		<!-- ./target/flexobuild -->
		<property name="artifact.dir" value="${flexobuild.work.dir}/checkedout-artifact" />
		<!-- ./target/flexobuild/checkedout-artifact -->
		<property name="dist.dir" value="${flexobuild.work.dir}/dist" />
		<!-- ./target/flexobuild/build -->
		<property name="mac.app.dir" value="${flexobuild.work.dir}/mac_apps" />
		<tstamp>
			<format property="build.id" pattern="yyyy-MM-dd.HHmm" />
		</tstamp>
		<property name="commit.id" value="${env.GIT_COMMIT}"/>
		<property name="maven.group.id" value="org.openflexo.packaging" />
		<property name="maven.type" value="zip" />
		<property name="maven.classifier" value="packaging" />
	</target>

	<target name="deploy" depends="defineProperties">
		<property name="deploy" value="true" />
		<property name="deployment.root.folder" value="~/downloads/modelers"/>
		<property name="deployment.user.name" value="${user.name}" />
		<property name="deployment.server.name" value="downloads.openflexo.org" />
		<property name="ssh.private.keyfile" value="${user.home}/.ssh/id_dsa" />
		<property name="ssh.passphrase" value="" />
		<tstamp>
			<format property="daily_folder" pattern="yyyy-MM-dd" />
		</tstamp>
		<antcall target="copyPackagesOnServer" />
	</target>

	<target name="package" depends="defineProperties">
		<delete dir="${mac.app.dir}" failonerror="false" />
		<mkdir dir="${mac.app.dir}" />
		<antcall target="createPackage" />
	</target>

	<target name="createPackage">
		<antcall target="cleanTempDir" />
		<property name="qualified_app_name" value="${product.name} ${productSuffix}" />
		<property name="qualified_and_versioned_app_name" value="${qualified_app_name} ${flexo_version}" />
		<!--<propertyregex property="package_name" input="${app_name} Setup" regexp="\s+" replace="_" global="true"/>-->
		<property name="mac.app.dir.versioned" value="${mac.app.dir}/${versionType}" />
		<property name="package_name" value="${qualified_and_versioned_app_name} Setup" />
		<property name="program.args" value="-userType ${userType}" />
		<antcall target="packageWindows" />
		<!--<antcall target="packageMacOSX" />
		<antcall target="packageLinux" />-->
	</target>

	<target name="cleanTempDir">
		<delete dir="${flexobuild.work.dir}" failonerror="false" />
		<mkdir dir="${flexobuild.work.dir}" />
		<delete dir="${dist.dir}" failonerror="false" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="packageWindows">
		<antcall target="windowsPackaging" />
	</target>

	<target name="windowsPackaging">
		<zip basedir="${flexobuild.work.dir}" destfile="${project.build.directory}/${product.name} ${productSuffix} ${flexo_version}.zip" compression="zip"/>
	</target>

	<target name="packageLinux">
		<antcall target="linux-packaging" />
	</target>

	<target name="linux-packaging">
		<tar destfile="${project.build.directory}/${product.name} ${productSuffix} ${flexo_version}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset mode="755" dir="${dist.dir}">
				<exclude name="*.exe"/>
				<include name="*.sh"/>
			</tarfileset>
			<tarfileset dir="${dist.dir}">
				<exclude name="*.exe"/>
				<exclude name="*.sh"/>
			</tarfileset>
		</tar>
	</target>

	<target name="copyPackagesOnServer" if="deploy">
		<antcall target="copyOnServerWindowsRelease" />
		<!--<antcall target="copyOnServerMacRelease"/>
		<antcall target="copyOnServerLinuxRelease"/>
		<antcall target="copyOnServerWindowsNightly" />
		<antcall target="copyOnServerMacNightly" />
		<antcall target="copyOnServerLinuxNightly" />-->
	</target>

	<target name="copyOnServerWindowsRelease" unless="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Windows" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*zip" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerMacRelease" unless="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Mac" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*.dmg" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerLinuxRelease" unless="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Linux" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*.tar.gz" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerWindowsNightly" if="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Windows" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*zip" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerMacNightly" if="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Mac" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*.dmg" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerLinuxNightly" if="isNightly">
		<property name="folder" value="${deployment.root.folder}/Modelers/${daily_folder}/Linux" />
		<antcall target="createRemoteFolder"/>
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false">
			<fileset dir="${project.build.directory}">
				<include name="*.tar.gz" />
			</fileset>
		</scp>
	</target>

	<target name="createRemoteFolder">
		<sshexec command="mkdir -p ${folder}" host="${deployment.server.name}" username="${deployment.user.name}" trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}" failonerror="false"/>
	</target>

</project>